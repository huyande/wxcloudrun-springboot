<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tencent.wxcloudrun.dao.MemberPointLogsMapper">

    <resultMap id="memberRulesMapper" type="com.tencent.wxcloudrun.model.MemberPointLogs">
        <id property="id" column="id"/>
        <result property="day" column="day" javaType="java.time.LocalDateTime"/>
        <result property="mid" column="mid"/>
        <result property="uid" column="uid"/>
        <result property="ruleId" column="ruleId"/>
        <result property="num" column="num"/>
        <result property="type" column="type"/>
        <result property="createdAt" column="createdAt" javaType="java.time.LocalDateTime" />
        <result property="updatedAt" column="updatedAt" javaType="java.time.LocalDateTime"  />
    </resultMap>

    <select id="getLogsByMidAndDate" resultMap="memberRulesMapper" parameterType="java.util.Map">
        SELECT `id`, `day`,`mid`, `uid`, `ruleId`, `num`, `createdAt`,`updatedAt`
        FROM member_point_logs
        WHERE mid = #{mid} AND day BETWEEN #{startTime} AND #{endTime} and type=0
    </select>

    <select id="getLogsByDayMidAndRuleId" resultMap="memberRulesMapper" parameterType="java.util.Map">
        SELECT `id`, `day`,`mid`, `uid` `ruleId`, `num`, `createdAt`,`updatedAt`
        FROM member_point_logs
        WHERE mid = #{mid} AND day = #{day} AND ruleId = #{ruleId} and type=0
    </select>

    <select id="getAllCountLogsByDayMid" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        SELECT count(distinct day) as c
        FROM member_point_logs
        WHERE mid = #{mid} and type=0
    </select>

    <delete id="delete" parameterType="java.lang.Long">
        DELETE
        FROM member_point_logs
        where id = #{id}
    </delete>

    <insert id="insertOne"  useGeneratedKeys="true" keyProperty="id" parameterType="com.tencent.wxcloudrun.model.MemberPointLogs">
            INSERT INTO `member_point_logs`(`day`,`mid`,`uid`,`ruleId`,`num`, `type`) VALUE(#{day},#{mid}, #{uid},  #{ruleId}, #{num}, #{type})
    </insert>


    <update id="updateById" parameterType="java.util.Map">
        UPDATE `member_point_logs`
        SET  `uid`=#{uid}, `num`=#{num}
        WHERE `id`=#{id}
    </update>

    <select id="getPointSumByMid" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        SELECT sum(num) as c
        FROM member_point_logs
        WHERE mid = #{mid}
    </select>

    <select id="getPointDaysByMid" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        SELECT count(DISTINCT day) as c
        FROM member_point_logs
        WHERE mid = #{mid} and type=0
    </select>

    <select id="getPointLogsByMidAndMonth" resultType="java.util.Map" parameterType="java.lang.Integer">
        SELECT DATE_FORMAT(day,'%Y-%m-%d') as day
        FROM member_point_logs
        WHERE mid = #{mid} and type=0 AND day BETWEEN DATE_FORMAT(NOW() ,'%Y-%m-01') AND CURDATE() GROUP BY day
    </select>


    <delete id="deleteByMid" parameterType="java.lang.Integer">
        DELETE FROM member_point_logs WHERE mid = #{mid}
    </delete>

    <delete id="deleteByRuleId" parameterType="java.lang.Integer">
        DELETE FROM member_point_logs WHERE ruleId = #{ruleId}
    </delete>

    <select id="getPointLogsByMid" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT DATE_FORMAT(day, '%Y-%m-%d') as day, num, name, icon, iconType
        FROM (
            SELECT
            t1.day,
            t1.num,
            t2.name,
            t2.icon,
            t2.iconType,
            @row_num := IF(@prev_day = t1.day, @row_num + 1, 1) AS row_num,
            @prev_day := t1.day
            FROM
            member_point_logs t1
            JOIN
            member_rules t2
            ON
            t1.ruleId = t2.id
            JOIN (SELECT @row_num := 0, @prev_day := NULL) vars
            WHERE
            t1.mid = #{mid}
            AND t2.mid = #{mid}
            AND t1.type=0
            ORDER BY
            t1.day DESC, t1.num DESC
            ) ranked_logs
        WHERE

            row_num <![CDATA[ <= ]]> 4
        ORDER BY
            day DESC
            LIMIT  #{pageSize} OFFSET #{offset};
    </select>

    <select id="getPointLogsByMidCount" parameterType="java.util.Map" resultType="java.lang.Integer">
        SELECT count(1) as c
        FROM (
                 SELECT
                     @row_num := IF(@prev_day = t1.day, @row_num + 1, 1) AS row_num,
                    @prev_day := t1.day
                 FROM
                     member_point_logs t1
                     JOIN
                     member_rules t2
                 ON
                     t1.ruleId = t2.id
                     JOIN (SELECT @row_num := 0, @prev_day := NULL) vars
                 WHERE
                     t1.mid = #{mid}
                   AND t2.mid = #{mid}
                   AND t1.type=0
                 ORDER BY
                     t1.day DESC, t1.num DESC
             ) ranked_logs
        WHERE
            row_num <![CDATA[ <= ]]> 4
    </select>

    <select id="getWeeklyPointLogs" resultType="java.util.Map" parameterType="java.util.Map">
        SELECT 
            ruleId,
            DATE_FORMAT(day, '%w') as weekday,
            COUNT(*) as count
        FROM 
            member_point_logs
        WHERE 
            mid = #{mid}
            AND type = 0
            AND day BETWEEN #{startTime} AND #{endTime}
        GROUP BY 
            ruleId, DATE_FORMAT(day, '%w')
    </select>

    <select id="getYesterdayLog" resultMap="memberRulesMapper" parameterType="java.util.Map">
        SELECT `id`, `day`,`mid`, `uid`, `ruleId`, `num`, `createdAt`,`updatedAt`
        FROM member_point_logs
        WHERE mid = #{mid} 
        AND ruleId = #{ruleId} 
        AND DATE(day) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)
        AND type = 0
        LIMIT 1
    </select>

    <select id="getBeforeYesterdayLog" resultMap="memberRulesMapper" parameterType="java.util.Map">
        SELECT `id`, `day`,`mid`, `uid`, `ruleId`, `num`, `createdAt`,`updatedAt`
        FROM member_point_logs
        WHERE mid = #{mid} 
        AND ruleId = #{ruleId} 
        AND DATE(createdAt) = DATE_SUB(CURDATE(), INTERVAL 2 DAY)
        AND type = 0
        LIMIT 1
    </select>

    <select id="getCheckInRecords" resultMap="memberRulesMapper" parameterType="java.util.Map">
        SELECT `id`, `day`, `mid`, `uid`, `ruleId`, `num`, `createdAt`, `updatedAt`
        FROM member_point_logs
        WHERE mid = #{mid} 
        AND ruleId = #{ruleId}
        AND type = 0
        ORDER BY day DESC
    </select>

    <select id="getPointSumByMidAndRuleId" parameterType="java.util.Map" resultType="java.lang.Integer">
        SELECT sum(num) as c
        FROM member_point_logs
        WHERE mid = #{mid} AND ruleId = #{ruleId} and type=0
    </select>

    <select id="getPointLogsCountByMidAndRuleId" parameterType="java.util.Map" resultType="java.lang.Integer">
        SELECT count(1) as c
        FROM member_point_logs
        WHERE mid = #{mid} AND ruleId = #{ruleId} and type=0
    </select>

    <select id="getMonthlyCheckInRecords" resultMap="memberRulesMapper" parameterType="java.util.Map">
        SELECT `day`,`num`
        FROM member_point_logs
        WHERE mid = #{mid} 
        AND ruleId = #{ruleId}
        AND type = 0
        AND DATE_FORMAT(day, '%Y-%m') = #{yearMonth}
        ORDER BY day DESC
    </select>

    <select id="getPointLogsByDateRange" resultMap="memberRulesMapper" parameterType="java.util.Map">
        SELECT `id`, `day`, `mid`, `uid`, `ruleId`, `num`, `createdAt`, `updatedAt`
        FROM member_point_logs
        WHERE mid = #{mid} 
        AND ruleId = #{ruleId}
        AND type = 0
        AND day BETWEEN #{startDay} AND #{endDay}
        ORDER BY day ASC
    </select>

</mapper>
